@inject IAdminService AdminService

<div class="d-xl-flex justify-content-center">
	<EditForm Model="@Model" OnValidSubmit="@OnFormSubmit" class="mb-5 border border-1 border-secondary p-2 w-25">
		<DataAnnotationsValidator />
		<h4>@Page SimilarFilms</h4>
		<div class="mb-3">
			@if (Page.Equals(PageType.Delete))
			{
				<InputNumber id="Film Title" class="form-control me-2" @bind-Value="Model.FilmId" disabled placeholder="Film Title"></InputNumber>
				<InputNumber id="SimilarFilm Title" class="form-control me-2" @bind-Value="Model.SimilarFilmId" disabled placeholder="SimilarFilm Title"></InputNumber>
			}
			else
			{
				<InputSelect @bind-Value="Model.FilmId" class="form-control mb-3">
					<option value=0>Film Title ...</option>
					@foreach (var film in Films)
					{
						<option value="@film.Id">@film.Title</option>
					}
				</InputSelect>
				<InputSelect @bind-Value="Model.SimilarFilmId" class="form-control mb-3">
					<option value=0>SimilarFilm Name ...</option>
					@foreach (var similar in SimilarFilms)
					{
						<option value="@similar.FilmId">@similar.SimilarFilmId</option>
					}
				</InputSelect>
			}
			<ValidationMessage For="@(() => Model.FilmId)" />
			<ValidationMessage For="@(() => Model.SimilarFilmId)" />
		</div>
		<button type="submit" class="btn btn-@(Page.Equals(PageType.Delete) ? "danger" : "primary") rounded-0">@Page</button>
	</EditForm>
</div>

@code {
	[Parameter] public SimilarFilmsDTO Model { get; set; } = new();
	[Parameter] public string Page { get; set; } = string.Empty;
	[Parameter] public EventCallback<string> OnChange { get; set; }
	List<FilmDTO> Films { get; set; } = new();
	List<SimilarFilmsDTO> SimilarFilms { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		Films = await AdminService.GetAsync<FilmDTO>("Films");
		SimilarFilms = await AdminService.GetAsync<SimilarFilmsDTO>("Similarfilm");
	}
	private async Task OnFormSubmit()

		{ try
			{
				Films = await AdminService.GetAsync<FilmDTO>("Films");
				{
					if (Page.Equals(PageType.Add))
						await AdminService.CreateAsync<SimilarFilmsDTO>("similarfilm", Model);
					else if (Page.Equals(PageType.Delete))
						await AdminService.DeleteReferenceAsync<SimilarFilmsDTO>($"similarfilm", new SimilarFilmsDTO
							{
								FilmId = Model.FilmId,
								SimilarFilmId = Model.SimilarFilmId
							});
					await OnChange.InvokeAsync("");
				}
			}
			catch
			{
				await OnChange.InvokeAsync("Couldn't create/edit/delete the similarfilm.");
			}
		}
	
}


